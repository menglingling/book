import{_ as s,o as a,c as n,a as l}from"./app.20213b8a.js";const f=JSON.parse('{"title":"迭代协议","description":"","frontmatter":{"tags":["JavaScript"],"date":"2024-01-11-周四","cdate":"2024-01-11T18:03:14.000Z","mdate":"2024-01-11T18:03:14.000Z","status":"done","title":"迭代协议"},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"术语概念","slug":"术语概念","link":"#术语概念","children":[{"level":3,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}]}],"relativePath":"javascript/JS中的迭代/迭代协议.md","lastUpdated":1706520204000}'),o={name:"javascript/JS中的迭代/迭代协议.md"},e=l(`<h1 id="迭代协议" tabindex="-1">迭代协议 <a class="header-anchor" href="#迭代协议" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><ul><li>首先迭代不是个新的概念，在设计模式中有迭代器模式，大白话就是：实现可以不知道一堆数据的的具体结构就能一个一个的取出数据元素。</li><li>Python、Java、C++，还有其他很多语言都对这个模式提供了完备的支持。JavaScript 在 ECMAScript 6 以后也支持迭代器模式。</li><li>Es6给许多内置对象在内部已经实现了迭代器，例如 string,Array,Map,Set,likeArray,DOM中 Nodelist 等,可以使用 <code>for of</code>来访问数据成员(<strong>注意：obj不能直接 for of</strong>)。</li><li>迭代和循环不同：迭代不需要清楚数据集的具体结构，不需要知道访问数据集中的单个元素的具体方法。</li><li>顺便说一下：按大家商量好的方式来干事情，有的地方叫标准，有的地方叫规则，有的地方叫接口，有的地方叫协议......这个看相关文档的时候要知道。</li></ul><h2 id="术语概念" tabindex="-1">术语概念 <a class="header-anchor" href="#术语概念" aria-hidden="true">#</a></h2><ul><li><strong>可迭代对象<code>iterable</code></strong>：大白话就是指装一堆数据的那个数据集对象，这个数据集对象如果实现了一个 方法名 叫<code>Symbol.iterator</code>的方法，那么这个数据集对象就变成了可迭代对象。 注意：这个装了一堆数据的对象一定要实现<code>Symbol.iterator</code>的方法，否则就是普通的对象，就不是可迭代对象。</li><li><strong>迭代器对象 <code>iterator</code></strong>：大白话就是我们实现的那个方法名叫<code>Symbol.iterator</code>的方法调用后生成的对象，这个生成的对象实现了一个方法名叫<code>next</code> 的方法，这个 next方法被调用又会返回一个包含当前元素和 done 属性的对象，形如<code>{done: false,value: 1}</code>或者<code>{ done: true, value: 10 }</code>。done 属性是一个布尔值，指示迭代是否完成。 代码示例：</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//iterable 有 key为Symbol.iterator的方法</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> iterable </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//实现 key 叫Symbol.iterator的方法</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">iterator</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    let </span><span style="color:#BABED8;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//实现 key 叫next的方法</span></span>
<span class="line"><span style="color:#F07178;">      next</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//返回固定格式的包含done 和 value 值 的对象</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">         if </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">count</span><span style="color:#F07178;"> &lt; 10</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            done</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">++,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> else </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            done</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//iterator有next方法，并且返回 包含done 和 value 值 的对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> iterator </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> iterable[Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">iterator]()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(iterator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &quot;done&quot;: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &quot;value&quot;: 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//done为 true 后，以后多次执行都返回相同的结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &quot;done&quot;: true,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &quot;value&quot;: 10</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span></code></pre></div><h3 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h3><p><a href="https://www.freecodecamp.org/news/demystifying-es6-iterables-iterators-4bdd0b084082/" target="_blank" rel="noreferrer">Demystifying ES6 Iterables &amp; Iterators</a></p><p><a href="https://ponyfoo.com/articles/es6-iterators-in-depth" target="_blank" rel="noreferrer">ES6 Iterators in Depth</a></p><p><a href="https://menglingling.github.io/book/javascript/iteration/iteration" target="_blank" rel="noreferrer">迭代器红皮书摘抄</a></p>`,10),p=[e];function t(r,c,i,y,F,D){return a(),n("div",null,p)}const u=s(o,[["render",t]]);export{f as __pageData,u as default};
