import{_ as s,o as n,c as a,a as o}from"./app.20213b8a.js";const d=JSON.parse('{"title":"原型继承","description":"","frontmatter":{"tags":["JavaScript"],"date":"2024-04-30-周二","cdate":"2024-04-30 16:32","mdate":"2024-04-30 16:32","status":"doing","title":"原型继承","hours":"1"},"headers":[{"level":2,"title":"原型继承的概念","slug":"原型继承的概念","link":"#原型继承的概念","children":[]},{"level":2,"title":"访问设置原型的几种方式","slug":"访问设置原型的几种方式","link":"#访问设置原型的几种方式","children":[]},{"level":2,"title":"常见的创建对象的方式及其原型","slug":"常见的创建对象的方式及其原型","link":"#常见的创建对象的方式及其原型","children":[{"level":3,"title":"对象字面量","slug":"对象字面量","link":"#对象字面量","children":[]},{"level":3,"title":"new构造函数创建","slug":"new构造函数创建","link":"#new构造函数创建","children":[]},{"level":3,"title":"Object.create(obj,[descriptors]) 语法从一个现有对象直接创建新对象","slug":"object-create-obj-descriptors-语法从一个现有对象直接创建新对象","link":"#object-create-obj-descriptors-语法从一个现有对象直接创建新对象","children":[]},{"level":3,"title":"class 语法创建新对象","slug":"class-语法创建新对象","link":"#class-语法创建新对象","children":[]}]},{"level":2,"title":"内置原型 Object.prototype 与其他内置原型的关系","slug":"内置原型-object-prototype-与其他内置原型的关系","link":"#内置原型-object-prototype-与其他内置原型的关系","children":[]},{"level":2,"title":"避免直接修改内置原型","slug":"避免直接修改内置原型","link":"#避免直接修改内置原型","children":[]},{"level":2,"title":"了解 polyfilling","slug":"了解-polyfilling","link":"#了解-polyfilling","children":[]},{"level":2,"title":"原型简史","slug":"原型简史","link":"#原型简史","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"relativePath":"javascript/JS中的 原型.md","lastUpdated":1715164291000}'),l={name:"javascript/JS中的 原型.md"},p=o(`<h1 id="js-中的-原型" tabindex="-1">JS 中的 原型 <a class="header-anchor" href="#js-中的-原型" aria-hidden="true">#</a></h1><h2 id="原型继承的概念" tabindex="-1">原型继承的概念 <a class="header-anchor" href="#原型继承的概念" aria-hidden="true">#</a></h2><p>原型继承主要用于扩展 JS 对象。</p><p>在 JavaScript 中，每一个对象都有一个内部的属性，称为原型（prototype）。这个原型是一个指向另外一个对象的引用，包含了可以被继承的属性和方法。</p><p>访问一个对象的属性或方法时，如果该对象本身没有这些属性或方法，那么 JavaScript 引擎会尝试在对象的原型上查找这些属性或方法。如果原型对象也没有这些属性或方法，则继续在原型的原型上查找，这样一层层向上直到找到为止或者到达原型链的顶端（null，表示没有更上层的原型了）。 原型继承一次只能继承一个对象，并且不能形成闭环。</p><p><code>Object.prototype.__proto__===null</code></p><p>继承的注意点：<strong>属性用自身的，方法用最近的原型的，自身有方法就用自身的方法</strong>。</p><h2 id="访问设置原型的几种方式" tabindex="-1">访问设置原型的几种方式 <a class="header-anchor" href="#访问设置原型的几种方式" aria-hidden="true">#</a></h2><p><strong>构造函数的<code>prototype</code>属性</strong> ，例如 <code>Person.prototype</code> ，通过这个属性，你可以为所有实例定义共享的属性和方法。</p><p><strong>通过<code>obj.__proto__</code>读写</strong>，<code>__proto__</code>  与内部的  <code>[[Prototype]]</code>  不一样，<code>__proto__</code> 是一种访问<code> [[Prototype]]</code> 的方式，而不是 <code>[[prototype]]</code> 本身，<code>__proto__</code>  是  <code>[[Prototype]]</code>  的 getter/setter。<code>__proto__</code>可以直接访问或修改对象的原型，但由于其非标准的性质，一般不推荐在生产环境中使用。允许在对象字面量中使用。</p><p><strong>使用函数  <code>Object.getPrototypeOf(obj)/Object.setPrototypeOf(obj)</code></strong>  来取代  <code>__proto__</code> ，这是一种标准的方式来获取对象的原型。相对于<code>__proto__</code>，这是更推荐的做法。</p><p><strong><code>Object.create(obj,[descriptors])</code> 的第一个参数可以用来设置原型</strong>。</p><p>理论上可以有<code>类的prototype属性</code>，但是直接操作<code>prototype</code>属性的情况不多见，因为你可以直接在类的声明中定义方法，这些方法会自动成为类的原型上的方法，这种方式更加清晰简洁，也是目前推荐的使用类的方法。</p><h2 id="常见的创建对象的方式及其原型" tabindex="-1">常见的创建对象的方式及其原型 <a class="header-anchor" href="#常见的创建对象的方式及其原型" aria-hidden="true">#</a></h2><h3 id="对象字面量" tabindex="-1">对象字面量 <a class="header-anchor" href="#对象字面量" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#82AAFF;">sayHello</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">你好，我是</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p><strong>对象字面量创建的对象的原型是 <code>Object.prototype </code></strong></p><h3 id="new构造函数创建" tabindex="-1"><code>new</code>构造函数创建 <a class="header-anchor" href="#new构造函数创建" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">age</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">sayHello</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">你好，我是</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> person1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">30</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> person2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">25</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> Person)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 默认的 prototype  */</span></span>
<span class="line"><span style="color:#FFCB6B;">Rabbit</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Rabbit </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p><strong>new 创建的对象的原型是构造函数的原型</strong>，例如<code>person1.__proto__ === Person.prototype</code>。</p><p>构造函数的原型 是只有一个属性  <code>constructor</code>  的对象，属性  <code>constructor</code>  指向函数自身 。例如 <code>Person.prototype = { constructor: Person }</code> 构造函数的原型的构造器等于构造函数。</p><h3 id="object-create-obj-descriptors-语法从一个现有对象直接创建新对象" tabindex="-1"><code>Object.create(obj,[descriptors])</code> 语法从一个现有对象直接创建新对象 <a class="header-anchor" href="#object-create-obj-descriptors-语法从一个现有对象直接创建新对象" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> personProto </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#82AAFF;">sayHello</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">你好，我是</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#BABED8;">(personProto)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> personProto)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p><strong>Object.create(obj,[descriptors]) 创建的对象的原型是第一个参数</strong>，传进来的第一个参数必须是一个对象或者 null，Object.create 要求至少一个参数，否则会报错。如果传入的是<code>null</code>，那么创建的是一个空对象，空对象不会继承任何东西，没有原型，即该对象的<code>__proto__</code>属性会被设置为<code>null</code>。</p><h3 id="class-语法创建新对象" tabindex="-1"><code>class</code> 语法创建新对象 <a class="header-anchor" href="#class-语法创建新对象" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">age</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">sayHello</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">你好，我是</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">30</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> Person)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p><strong>class 创建的对象的原型是类的原型</strong>，例如<code>person.__proto__ === Person.prototype</code>，类的原型的构造器等于类。</p><h2 id="内置原型-object-prototype-与其他内置原型的关系" tabindex="-1">内置原型 Object.prototype 与其他内置原型的关系 <a class="header-anchor" href="#内置原型-object-prototype-与其他内置原型的关系" aria-hidden="true">#</a></h2><p>通常，对象会从 Object.prototype 继承内建的方法和 <code>__proto__</code> 。原型为 null 时，对象才真正是空的。</p><p><img src="https://zh.javascript.info/article/native-prototypes/native-prototypes-classes.svg" alt=""></p><h2 id="避免直接修改内置原型" tabindex="-1">避免直接修改内置原型 <a class="header-anchor" href="#避免直接修改内置原型" aria-hidden="true">#</a></h2><p>在开发的过程中，我们可能会想要一些新的内建方法，并且想把它们添加到原生原型中。但这通常是一个很不好的想法。原型是全局的，所以很<strong>容易造成冲突</strong>，而且降低代码的可读性，增加维护成本，影响引擎对代码的优化，降低执行速度。</p><p>通常推荐的做法是避免直接修改内置原型，而是选择其他方法如：函数借用 ，包装器等。</p><h2 id="了解-polyfilling" tabindex="-1">了解 polyfilling <a class="header-anchor" href="#了解-polyfilling" aria-hidden="true">#</a></h2><p>在现代编程中，<strong>只有一种情况下允许修改内置原生原型。那就是 polyfilling</strong>。Polyfilling 是一个术语，表示某个方法在 JavaScript 规范中已存在，但是特定的 JavaScript 引擎尚不支持该方法，那么我们可以通过手动实现它，并用以填充内建原型。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">repeat) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 如果这儿没有这个方法</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 那就在 prototype 中添加它</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">repeat</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 重复传入的字符串 n 次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 实际上，实现代码比这个要复杂一些（完整的方法可以在规范中找到）</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 但即使是不够完美的 polyfill 也常常被认为是足够好的</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">La</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">repeat</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// LaLaLa</span></span>
<span class="line"></span></code></pre></div><h2 id="原型简史" tabindex="-1">原型简史 <a class="header-anchor" href="#原型简史" aria-hidden="true">#</a></h2><p>有这么多可以处理<code>[[Prototype]]</code> 的方式。发生了什么？为什么会这样？这是历史原因。</p><p>原型继承从一开始就存在于语言中，但管理它的方式随着时间的推移而演变。</p><p>构造函数的 &quot;prototype&quot; 属性自古以来就起作用。这是使用给定原型创建对象的最古老的方式。</p><p>之后，在 2012 年，Object.create 出现在标准中。它提供了使用给定原型创建对象的能力。但没有提供 get/set 它的能力。一些浏览器实现了非标准的 <strong>proto</strong> 访问器，以为开发者提供更多的灵活性。</p><p>之后，在 2015 年，Object.setPrototypeOf 和 Object.getPrototypeOf 被加入到标准中，执行与 <strong>proto</strong> 相同的功能。由于 <strong>proto</strong> 实际上已经在所有地方都得到了实现，但它已过时，所以被加入到该标准的附件 B 中，即：在非浏览器环境下，它的支持是可选的。</p><p>之后，在 2022 年，官方允许在对象字面量 {...} 中使用 <strong>proto</strong>（从附录 B 中移出来了），但不能用作 getter/setter obj.<strong>proto</strong>（仍在附录 B 中）。</p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h2><ul><li>Javascript 现代教程<a href="https://zh.javascript.info/prototypes" target="_blank" rel="noreferrer">https://zh.javascript.info/prototypes</a></li></ul>`,45),e=[p];function t(c,r,y,D,F,i){return n(),a("div",null,e)}const A=s(l,[["render",t]]);export{d as __pageData,A as default};
