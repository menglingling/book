import{_ as e,c as a,o as t,a as r}from"./app.e6313c6b.js";const u=JSON.parse('{"title":"迭代器的理解","description":"","frontmatter":{},"headers":[{"level":2,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[]},{"level":2,"title":"ES6 迭代器","slug":"es6-迭代器","link":"#es6-迭代器","children":[{"level":3,"title":"为什么 ES6 引入了迭代器","slug":"为什么-es6-引入了迭代器","link":"#为什么-es6-引入了迭代器","children":[]},{"level":3,"title":"迭代协议","slug":"迭代协议","link":"#迭代协议","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"relativePath":"javascript/iteration/iteration2.md","lastUpdated":1676987701000}'),i={name:"javascript/iteration/iteration2.md"},n=r('<h1 id="迭代器的理解" tabindex="-1">迭代器的理解 <a class="header-anchor" href="#迭代器的理解" aria-hidden="true">#</a></h1><h2 id="迭代器模式" tabindex="-1">迭代器模式 <a class="header-anchor" href="#迭代器模式" aria-hidden="true">#</a></h2><p>目的：提供<strong>一种方法</strong>能够让使用者不关心对象的内部构造，但可以按顺序访问其中的每个元素。</p><h2 id="es6-迭代器" tabindex="-1">ES6 迭代器 <a class="header-anchor" href="#es6-迭代器" aria-hidden="true">#</a></h2><h3 id="为什么-es6-引入了迭代器" tabindex="-1">为什么 ES6 引入了迭代器 <a class="header-anchor" href="#为什么-es6-引入了迭代器" aria-hidden="true">#</a></h3><p>不是所有的对象都是可以枚举的。</p><p>Array,Map,Set 是可以枚举的，Javascript 提供了内置的 for... of 来访问数据成员。 但是原生对象 obj 是不可枚举的(原因看参考文档，一句话因为没有简单的方法来区分程序级和数据级迭代。)。 但是可能会需要迭代 obj,所以 ES6 提供可以遵循迭代器协议创建自己的迭代器的方法。</p><h3 id="迭代协议" tabindex="-1">迭代协议 <a class="header-anchor" href="#迭代协议" aria-hidden="true">#</a></h3><p>将一个普通对象变成可迭代对象需要遵循的协议：</p><ul><li>iterable :可迭代对象。普通对象实现了一个 key 叫做 Symbol.iterator 的方法，这个方法返回迭代器 iterator。</li><li>iterator :本身也是一个对象，包含一个叫 next 的函数的。next 函数 返回 value 和 done。value 是下一个可迭代对象。done 是一个表示整个迭代是否完成的标志。</li></ul><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h2><p><a href="https://www.freecodecamp.org/news/demystifying-es6-iterables-iterators-4bdd0b084082/" target="_blank" rel="noreferrer">Demystifying ES6 Iterables &amp; Iterators</a></p><p><a href="https://menglingling.github.io/book/javascript/iteration/iteration" target="_blank" rel="noreferrer">迭代器红皮书摘抄</a></p>',13),l=[n];function s(o,d,h,c,p,_){return t(),a("div",null,l)}const b=e(i,[["render",s]]);export{u as __pageData,b as default};
