import{_ as e,o as a,c as i,a as r}from"./app.a874a089.js";const f=JSON.parse('{"title":"JS中的recusion","description":"","frontmatter":{"tags":["JavaScript"],"date":"2024-01-22-周一","cdate":"2024-01-22T17:15:11.000Z","mdate":"2024-01-22T17:15:11.000Z","status":"doing","title":"JS中的recusion"},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"术语概念","slug":"术语概念","link":"#术语概念","children":[]},{"level":2,"title":"几个问答","slug":"几个问答","link":"#几个问答","children":[{"level":3,"title":"核心特点？","slug":"核心特点","link":"#核心特点","children":[]},{"level":3,"title":"有哪些属性和方法？","slug":"有哪些属性和方法","link":"#有哪些属性和方法","children":[]},{"level":3,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}]}],"relativePath":"javascript/经典代码函数和结构/JS中的recusion.md","lastUpdated":1706520204000}'),t={name:"javascript/经典代码函数和结构/JS中的recusion.md"},l=r('<h1 id="js中的recusion" tabindex="-1">JS中的recusion <a class="header-anchor" href="#js中的recusion" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><ul><li>递归是一种编程模式，简言之就是调用自身。</li><li>例子空闲的时候值得思考，值得好好写一篇。</li></ul><h2 id="术语概念" tabindex="-1">术语概念 <a class="header-anchor" href="#术语概念" aria-hidden="true">#</a></h2><ul><li></li></ul><h2 id="几个问答" tabindex="-1">几个问答 <a class="header-anchor" href="#几个问答" aria-hidden="true">#</a></h2><h3 id="核心特点" tabindex="-1">核心特点？ <a class="header-anchor" href="#核心特点" aria-hidden="true">#</a></h3><ul><li></li></ul><h3 id="有哪些属性和方法" tabindex="-1">有哪些属性和方法？ <a class="header-anchor" href="#有哪些属性和方法" aria-hidden="true">#</a></h3><h3 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h3><p><a href="https://javascript.info/recursion" target="_blank" rel="noreferrer">https://javascript.info/recursion</a></p>',11),n=[l];function s(d,h,c,o,u,_){return a(),i("div",null,n)}const v=e(t,[["render",s]]);export{f as __pageData,v as default};
