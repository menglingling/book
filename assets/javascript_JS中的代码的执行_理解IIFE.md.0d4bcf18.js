import{_ as s,o as a,c as n,a as l}from"./app.20213b8a.js";const h=JSON.parse('{"title":"理解 IIFE","description":"","frontmatter":{"tags":["JavaScript"],"date":"2024-01-29-周一","cdate":"2024-01-29T18:35:44.000Z","mdate":"2024-01-29T19:05:44.000Z","status":"done","title":"理解 IIFE","hours":"1"},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"问答","slug":"问答","link":"#问答","children":[{"level":3,"title":"为什么这样写就能模拟块作用域呢？","slug":"为什么这样写就能模拟块作用域呢","link":"#为什么这样写就能模拟块作用域呢","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"relativePath":"javascript/JS中的代码的执行/理解IIFE.md","lastUpdated":1715164291000}'),p={name:"javascript/JS中的代码的执行/理解IIFE.md"},e=l(`<h1 id="理解-iife" tabindex="-1">理解 IIFE <a class="header-anchor" href="#理解-iife" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>es6 以前 JS 只有全局作用域和函数作用域，没有块作用域的，但是很多其他的编程语言是有块作用域的比如 C，JAVA 等等。<br> 程序员们就自己发明了一种结使 JS 好像拥有的块作用域一样。<br> 这就是 IIFE(immediately-invoked function expressions)</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">message</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// Hello</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="问答" tabindex="-1">问答 <a class="header-anchor" href="#问答" aria-hidden="true">#</a></h2><h3 id="为什么这样写就能模拟块作用域呢" tabindex="-1">为什么这样写就能模拟块作用域呢？ <a class="header-anchor" href="#为什么这样写就能模拟块作用域呢" aria-hidden="true">#</a></h3><p>因为 JS 引擎执行代码的时候，函数被调用就会创建执行上下文，有了函数相关的执行上下文，有了执行上下文就会有相关联词法环境对象，有了词法环境对象就有了自己的私有变量。</p><p>这里关键点就是创建一个函数立即调用才立即有对应的执行上下文。</p><p>但也不是所有的函数都能立即调用的，函数声明方式创建的函数就不被引擎允许立即调用。</p><p>但是在其他表达式中创建的函数可以立即调用。</p><p>所以能模拟块作用域主要就是需要<strong>一个在表达式中的函数立马调用</strong>。</p><p>通过上面的分析我们得出了 IIFE 的很多变体</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Parentheses around the function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Parentheses around the whole thing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">!</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bitwise NOT operator starts the expression</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Unary plus starts the expression</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>现在有 let const 了，就没必要立即调用函数模拟块作用域了，但是弄清楚原理可以帮助我们更好的识别旧代码中的 IIFE。</li></ul><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h2><ul><li><a href="https://javascript.info/var" target="_blank" rel="noreferrer">https://javascript.info/var</a></li></ul>`,17),o=[e];function t(r,c,i,F,D,y){return a(),n("div",null,o)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
