import{_ as e,o as a,c as t,a as r}from"./app.20213b8a.js";const f=JSON.parse('{"title":"JS中的recusion","description":"","frontmatter":{"tags":["JavaScript"],"date":"2024-01-22-周一","cdate":"2024-01-22T17:15:11.000Z","mdate":"2024-01-22T17:15:11.000Z","status":"done","title":"JS中的recusion"},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}]}],"relativePath":"javascript/经典代码函数和结构/JS中的recusion.md","lastUpdated":1715164291000}'),i={name:"javascript/经典代码函数和结构/JS中的recusion.md"},s=r('<h1 id="js中的recusion" tabindex="-1">JS中的recusion <a class="header-anchor" href="#js中的recusion" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><ul><li>递归是一种编程模式，简言之就是调用自身。</li><li>例子空闲的时候值得思考，值得好好写一篇。</li></ul><h3 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h3><p><a href="https://javascript.info/recursion" target="_blank" rel="noreferrer">https://javascript.info/recursion</a></p>',5),n=[s];function c(o,d,l,_,h,u){return a(),t("div",null,n)}const S=e(i,[["render",c]]);export{f as __pageData,S as default};
