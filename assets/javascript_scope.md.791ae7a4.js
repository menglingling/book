import{_ as s,o as a,c as e,a as n}from"./app.c06e2760.js";const u=JSON.parse('{"title":"作用域","description":"","frontmatter":{},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"词法作用域","slug":"词法作用域","link":"#词法作用域","children":[]},{"level":2,"title":"JS 的作用域分类","slug":"js-的作用域分类","link":"#js-的作用域分类","children":[]},{"level":2,"title":"作用域链 scope chain = environment record(环境记录)","slug":"作用域链-scope-chain-environment-record-环境记录","link":"#作用域链-scope-chain-environment-record-环境记录","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]},{"level":2,"title":"写在后面","slug":"写在后面","link":"#写在后面","children":[]}],"relativePath":"javascript/scope.md","lastUpdated":1669707918000}'),l={name:"javascript/scope.md"},o=n(`<h1 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-hidden="true">#</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-hidden="true">#</a></h2><p>简而言之：变量和表达式可见或可被引用的的执行上下文范围（The scope is the current context of execution in which values and expressions are &quot;visible&quot; or can be referenced.from mdn）</p><h2 id="词法作用域" tabindex="-1">词法作用域 <a class="header-anchor" href="#词法作用域" aria-hidden="true">#</a></h2><p>js 是词法作用域，又叫静态作用域，编写代码时就确定了作用域，而不是执行阶段确立的</p><p>仔细阅读下面的代码，深刻理解什么叫<strong>编写代码时就确定了访问范围</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">foo</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">bar</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="js-的作用域分类" tabindex="-1">JS 的作用域分类 <a class="header-anchor" href="#js-的作用域分类" aria-hidden="true">#</a></h2><ul><li>全局作用域（Global scope: The default scope for all code running in script mode.）</li><li>模块作用域（Module scope: The scope for code running in module mode.）</li><li>函数作用域（局部作用域）：（Function scope: The scope created with a function.）</li><li>块作用域：（Block scope: The scope created with a pair of curly braces (a block).）</li></ul><h2 id="作用域链-scope-chain-environment-record-环境记录" tabindex="-1">作用域链 scope chain = environment record(环境记录) <a class="header-anchor" href="#作用域链-scope-chain-environment-record-环境记录" aria-hidden="true">#</a></h2><ul><li>每个函数调用都有自己的上下文。当代码执行流进入函数时，函数的上下文被推到一个上下文栈上。 在函数执行完之后，上下文栈会弹出该函数上下文，将控制权返还给之前的执行上下文。ECMAScript 程序的执行流就是通过这个上下文栈进行控制的。</li><li>上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）。这个作用域链决定 了各级上下文中的代码在访问变量和函数时的顺序。代码正在执行的上下文的变量对象始终位于作用域 链的最前端。</li><li>全局上下文的变量对象始终 是作用域链的最后一个变量对象。</li></ul><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h2><ul><li>[javascript 高级程序设计]（）</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Scope" target="_blank" rel="noreferrer">MDN</a></li></ul><h2 id="写在后面" tabindex="-1">写在后面 <a class="header-anchor" href="#写在后面" aria-hidden="true">#</a></h2>`,14),r=[o];function p(c,t,i,d,h,F){return a(),e("div",null,r)}const D=s(l,[["render",p]]);export{u as __pageData,D as default};
