import{_ as s,o as n,c as a,a as e}from"./app.20213b8a.js";const B=JSON.parse('{"title":"对象的属性配置","description":"","frontmatter":{"tags":["JavaScript"],"date":"2024-04-25-周四","cdate":"2024-04-25T08:54:31.000Z","mdate":"2024-04-25T10:00:31.000Z","status":"done","title":"对象的属性配置","hours":"1"},"headers":[{"level":2,"title":"对象的属性标志是什么","slug":"对象的属性标志是什么","link":"#对象的属性标志是什么","children":[]},{"level":2,"title":"Object.defineProperty 和 Object.getOwnPropertyDescriptor","slug":"object-defineproperty-和-object-getownpropertydescriptor","link":"#object-defineproperty-和-object-getownpropertydescriptor","children":[]},{"level":2,"title":"比较普通方式 . 创建属性 与 Object.defineProperty 创建属性的区别","slug":"比较普通方式-创建属性-与-object-defineproperty-创建属性的区别","link":"#比较普通方式-创建属性-与-object-defineproperty-创建属性的区别","children":[]},{"level":2,"title":"批量定义属性 Object.defineProperties 批量获取属性 Object.getOwnPropertyDescriptors","slug":"批量定义属性-object-defineproperties-批量获取属性-object-getownpropertydescriptors","link":"#批量定义属性-object-defineproperties-批量获取属性-object-getownpropertydescriptors","children":[]},{"level":2,"title":"克隆对象","slug":"克隆对象","link":"#克隆对象","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"relativePath":"javascript/JS中的 对象的数据属性描述符配置.md","lastUpdated":1715164291000}'),l={name:"javascript/JS中的 对象的数据属性描述符配置.md"},o=e(`<h1 id="对象的属性配置" tabindex="-1">对象的属性配置 <a class="header-anchor" href="#对象的属性配置" aria-hidden="true">#</a></h1><h2 id="对象的属性标志是什么" tabindex="-1">对象的属性标志是什么 <a class="header-anchor" href="#对象的属性标志是什么" aria-hidden="true">#</a></h2><p>对象属性（properties），除  <strong><code>value</code></strong>  外，还有三个特殊的特性（attributes），也就是所谓的“标志（flag）”：</p><ul><li><strong><code>writable</code></strong> — 如果为  <code>true</code>，表示属性值可以被修改，否则它是只可读的。如 <code>Math.PI</code>就是不能修改的。</li><li><strong><code>enumerable</code></strong> — 如果为  <code>true</code>，表示属性会在循环<code>for in</code>中或者会包含在<code>Object.keys</code>中 ，否则不会。</li><li><strong><code>configurable</code></strong> — 如果为  <code>true</code>，表示 <code>writable enumerable</code> 是可以在后面的代码中通过  <code>defineProperty</code>设置的，否则无法再通过  <code>defineProperty</code>  再把 <code>writable enumerable </code>改回来。</li></ul><h2 id="object-defineproperty-和-object-getownpropertydescriptor" tabindex="-1"><strong>Object.defineProperty</strong> 和 <strong>Object.getOwnPropertyDescriptor</strong> <a class="header-anchor" href="#object-defineproperty-和-object-getownpropertydescriptor" aria-hidden="true">#</a></h2><p><strong>默认属性标志值都为 false</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Object.defineProperty(obj, propertyName, descriptor)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#BABED8;">(user</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> descriptor </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#BABED8;">(user</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#BABED8;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#BABED8;">(descriptor</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &quot;value&quot;: &quot;John&quot;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &quot;writable&quot;: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &quot;enumerable&quot;: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &quot;configurable&quot;: false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span></code></pre></div><h2 id="比较普通方式-创建属性-与-object-defineproperty-创建属性的区别" tabindex="-1">比较普通方式 . 创建属性 与 <strong>Object.defineProperty</strong> 创建属性的区别 <a class="header-anchor" href="#比较普通方式-创建属性-与-object-defineproperty-创建属性的区别" aria-hidden="true">#</a></h2><p><strong>默认属性标志值都为 true</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> descriptor </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#BABED8;">(user</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#BABED8;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#BABED8;">(descriptor</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 属性描述符：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &quot;value&quot;: &quot;John&quot;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &quot;writable&quot;: true,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &quot;enumerable&quot;: true,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &quot;configurable&quot;: true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span></code></pre></div><h2 id="批量定义属性-object-defineproperties-批量获取属性-object-getownpropertydescriptors" tabindex="-1">批量定义属性 <strong><code>Object.defineProperties</code></strong> 批量获取属性 <strong><code>Object.getOwnPropertyDescriptors</code></strong> <a class="header-anchor" href="#批量定义属性-object-defineproperties-批量获取属性-object-getownpropertydescriptors" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperties</span><span style="color:#BABED8;">(user</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">surname</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Smith</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="克隆对象" tabindex="-1">克隆对象 <a class="header-anchor" href="#克隆对象" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> clone </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperties</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptors</span><span style="color:#BABED8;">(obj))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>通常，当我们克隆一个对象时，我们使用赋值的方式来复制属性，像这样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> key </span><span style="color:#89DDFF;">in</span><span style="color:#BABED8;"> user) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#BABED8;">clone</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">user</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>……但是，这并不能复制标志。所以如果我们想要一个“更好”的克隆，那么 Object.defineProperties 是首选。</p><p>另一个区别是 for..in 会忽略 symbol 类型的和不可枚举的属性，但是 Object.getOwnPropertyDescriptors 返回包含 symbol 类型的和不可枚举的属性在内的 所有 属性描述符。</p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h2><ul><li>Javascript 现代教程 <a href="https://zh.javascript.info/property-descriptors" target="_blank" rel="noreferrer">https://zh.javascript.info/property-descriptors</a></li></ul>`,20),p=[o];function t(r,c,i,y,D,F){return n(),a("div",null,p)}const u=s(l,[["render",t]]);export{B as __pageData,u as default};
